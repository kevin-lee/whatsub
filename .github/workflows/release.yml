name: Release

on:
  push:
    tags:
      - '*'

env:
  GH_JAVA_VERSION: "17"
  GH_JAVA_DISTRIBUTION: "temurin"
  GH_SBT_OPTS: "-Xss64m -Xms2G -XX:MaxMetaspaceSize=1G -Xmx4G -XX:MaxInlineLevel=18 -XX:+UnlockExperimentalVMOptions"
  GH_JVM_OPTS: "-Xss64m -Xms2G -XX:MaxMetaspaceSize=1G -Xmx4G -XX:MaxInlineLevel=18 -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler"
  CLI_SCALA_VERSION: "3.3.5"
  CLI_SCALA_BINARY_VERSION: "3"
  GRAALVM_JAVA_VERSION: "17"
  GRAALVM_BIN_DIR_NAME: "native-image"
  PROJECT_NAME: "whatsub"

jobs:
  gh-release:
    if: startsWith(github.ref, 'refs/tags/v')

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-java@v5
        with:
          java-version: ${{ env.GH_JAVA_VERSION }}
          distribution: ${{ env.GH_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1

      - name: sbt GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
          JVM_OPTS: ${{ env.GH_JVM_OPTS }}
          SBT_OPTS: ${{ env.GH_SBT_OPTS }}
        run: |
          echo "Run] sbt GitHub release"
          echo 'sbt -J-XX:MaxMetaspaceSize=1024m -J-Xmx2048m devOopsGitHubRelease'
          echo "JVM_OPTS=${JVM_OPTS}"
          echo "SBT_OPTS=${SBT_OPTS}"
          sbt \
            devOopsGitHubRelease

#  publish:
#    needs: gh-release
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v5
#        with:
#          fetch-depth: 0
#      - uses: olafurpg/setup-scala@v14
#        with:
#          java-version: ${{ env.GH_JAVA_VERSION }}
#      - uses: olafurpg/setup-gpg@v3
#
#      - name: Cache SBT
#        uses: actions/cache@v4.2.3
#        with:
#          path: |
#            ~/.ivy2/cache
#            ~/.cache/coursier
#            ~/.sbt
#          key: ${{ runner.os }}-sbt-${{ env.CLI_SCALA_BINARY_VERSION }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-sbt-${{ env.CLI_SCALA_BINARY_VERSION }}-
#
#      - name: "sbt ci-release - ${{ github.run_number }}"
#        if: startsWith(github.ref, 'refs/tags/v')
#        env:
#          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
#          PGP_SECRET: ${{ secrets.PGP_SECRET }}
#          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
#          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
#          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
#          JVM_OPTS: ${{ env.GH_JVM_OPTS }}
#          SBT_OPTS: ${{ env.GH_SBT_OPTS }}
#        run: |
#          echo "Run] sbt ci-release"
#          export SOURCE_DATE_EPOCH=$(date +%s)
#          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH"
#          echo 'sbt -J-XX:MaxMetaspaceSize=1024m -J-Xmx2048m -v clean +test +packagedArtifacts ci-release devOopsGitHubReleaseUploadArtifacts'
#          sbt \
#          -J-XX:MaxMetaspaceSize=1024m \
#          -J-Xmx2048m \
#          -v \
#          clean \
#          +test \
#          +packagedArtifacts \
#          ci-release


  packager-gh-release:
    needs: gh-release

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v5
        with:
          java-version: ${{ env.GH_JAVA_VERSION }}
          distribution: ${{ env.GH_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1

      - name: "sbt GitHub Release and Publish tag for ${{ matrix.scala.name }} ${{ matrix.scala.version }} - ${{ github.run_number }}"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
          JVM_OPTS: ${{ env.GH_JVM_OPTS }}
          SBT_OPTS: ${{ env.GH_SBT_OPTS }}
        run: |
          echo "Run] sbt cli package release"
          export SOURCE_DATE_EPOCH=$(date +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH"
          echo "JVM_OPTS=${JVM_OPTS}"
          echo "SBT_OPTS=${SBT_OPTS}"
          echo 'sbt ++${{ env.CLI_SCALA_VERSION }}! -v clean test universal:packageBin devOopsGitHubReleaseUploadArtifacts'
          sbt \
            ++${{ env.CLI_SCALA_VERSION }}! \
            -v \
            clean \
            test \
            universal:packageBin \
            devOopsGitHubReleaseUploadArtifacts


  graalvm-gh-release:
    needs: gh-release
    runs-on: ${{ matrix.os.value }}
    strategy:
      matrix:
        # https://github.com/actions/runner-images?tab=readme-ov-file#available-images
        os:
          - { name: "Ubuntu 22.04",           value: "ubuntu-22.04", bin-suffix: "-ubuntu" }
          - { name: "macOS 13",               value: "macos-13",     bin-suffix: "-macos-13" }
          - { name: "macOS 14 Apple Silicon", value: "macos-14",     bin-suffix: "-macos-14-arm64" }
          - { name: "macOS 15 Apple Silicon", value: "macos-15",     bin-suffix: "-macos-15-arm64" }
        run-binary: [whatsub-cli]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v5
        with:
          java-version: ${{ env.GH_JAVA_VERSION }}
          distribution: ${{ env.GH_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1

      - name: "GraalVM Build for Scala ${{ env.CLI_SCALA_VERSION }} - ${{ github.run_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
          CURRENT_BRANCH_NAME: ${{ github.ref }}
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          JVM_OPTS: ${{ env.GH_JVM_OPTS }}
          SBT_OPTS: ${{ env.GH_SBT_OPTS }}
          APP_BIN_NAME: ${{ matrix.run-binary }}${{ matrix.os.bin-suffix }}
        run: |
          echo "JVM_OPTS=${JVM_OPTS}"
          echo "SBT_OPTS=${SBT_OPTS}"
          sbt \
            ++${{ env.CLI_SCALA_VERSION }}! \
            clean \
            test \
            nativeImage

          rm -f modules/${{ env.PROJECT_NAME }}-*/target/scala-*/*.jar

          ls -lGh modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/
          sh -c "modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }} --help"

          echo "mv modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }} modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/$APP_BIN_NAME"
          mv modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }} modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/$APP_BIN_NAME

          sh -c "modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/$APP_BIN_NAME --version"
          sh -c "modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/$APP_BIN_NAME --help"

          sbt \
            devOopsGitHubReleaseUploadArtifacts

  graalvm-win-gh-release:
    needs: gh-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        run-binary: [whatsub-cli]
        run-binary-ext: [exe]
    steps:
      - name: Configure git
        run: "git config --global core.autocrlf false"
        shell: bash
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v5
        with:
          java-version: ${{ env.GH_JAVA_VERSION }}
          distribution: ${{ env.GH_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1

      - uses: ilammy/msvc-dev-cmd@v1

      - name: "GraalVM Build for Scala ${{ env.CLI_SCALA_VERSION }} - ${{ github.run_number }}"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
          CURRENT_BRANCH_NAME: ${{ github.ref }}
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          JVM_OPTS: ${{ env.GH_JVM_OPTS }}
          SBT_OPTS: ${{ env.GH_SBT_OPTS }}
        run: |
          sbt \
            ++${{ env.CLI_SCALA_VERSION }}! \
            clean \
            test \
            nativeImage

          rm -f modules/*/target/scala-*/*.jar

          ls -lGh modules/whatsub-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/
          sh -c "modules/whatsub-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }} --help"

          mv modules/whatsub-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }}.${{ matrix.run-binary-ext }} modules/whatsub-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }}-${{ matrix.os }}.${{ matrix.run-binary-ext }}

          sbt \
            devOopsGitHubReleaseUploadArtifacts

